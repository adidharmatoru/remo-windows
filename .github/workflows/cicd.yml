name: CICD

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

# Add permissions for the workflow
permissions:
  contents: write  # Required for creating releases

jobs:
  setup-ffmpeg:
    name: Setup FFmpeg
    # Only run on push to master or PR, skip for tag pushes
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check FFmpeg cache
        id: ffmpeg-cache
        uses: actions/cache@v4
        with:
          path: third_party/ffmpeg
          key: ffmpeg-${{ runner.os }}-${{ hashFiles('Cargo.toml') }}
      
      - name: Download and setup FFmpeg
        if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path third_party/ffmpeg
          Invoke-WebRequest -Uri "https://cdn.adidharmatoru.dev/dev/uploads/files/ffmpeg-master-latest-win64-gpl-shared.zip" -OutFile "ffmpeg.zip"
          Expand-Archive -Path ffmpeg.zip -DestinationPath ffmpeg_temp
          $FFMPEG_DIR = Get-ChildItem -Path ffmpeg_temp -Directory -Filter "ffmpeg-*" | Select-Object -First 1
          Copy-Item -Path "$($FFMPEG_DIR.FullName)/*" -Destination "third_party/ffmpeg/" -Recurse
          Remove-Item -Path ffmpeg_temp, ffmpeg.zip -Recurse -Force
          
      - name: Validate FFmpeg setup
        shell: pwsh
        run: |
          if (-not (Test-Path third_party/ffmpeg/bin)) { exit 1 }
          if (-not (Test-Path third_party/ffmpeg/lib)) { exit 1 }
          if (-not (Test-Path third_party/ffmpeg/include)) { exit 1 }

  build:
    name: Build and Test
    # Only run on push to master or PR, skip for tag pushes
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')
    needs: setup-ffmpeg
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Git credentials
        run: |
          git config --global credential.helper store
          Add-Content -Path "$HOME/.git-credentials" -Value "https://${{ secrets.GH_PAT }}@github.com`n"
          git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf "https://github.com/"

      - name: Restore FFmpeg cache
        uses: actions/cache@v4
        with:
          path: third_party/ffmpeg
          key: ffmpeg-${{ runner.os }}-${{ hashFiles('Cargo.toml') }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache Dependencies
        id: deps-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.toml') }}

      - name: Build and Test
        shell: pwsh
        env:
          FFMPEG_DIR: ${{ github.workspace }}/third_party/ffmpeg
          CARGO_NET_GIT_FETCH_WITH_CLI: true
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          cargo fmt --all -- --check
          cargo clippy
          cargo build --release

      - name: Prepare Release Package
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release
          Copy-Item -Path "target/release/remo-win.exe" -Destination "./release/"
          Copy-Item -Path "third_party/ffmpeg/bin/*.dll" -Destination "./release/"
          Compress-Archive -Path "release/*" -DestinationPath "release/remo-win.zip" -Force

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: remo-win
          path: release/remo-win.zip
          retention-days: 1  # Keep artifacts for 1 day

  create-release:
    name: Create Release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Latest Artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: cicd.yml
          branch: master
          name: remo-win
          path: release

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/**
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: |
            ## Changes
            - Optimize SIMD operations for supported CPU.
            - 4:4:4 chroma subsampling trial.
            - Optimize av1 encoding presets.

            ## Build
            Info
            - Built for Windows 11
            - Portable version, no installation needed (for core functionality).
            - Download latest vigemBus if you want to use gamepad from https://github.com/ViGEm/ViGEmBus/releases and install it.
            - Download latest VDD if you want to use custom resolution and refresh rate from https://github.com/VirtualDrivers/Virtual-Display-Driver/releases and install it.

            ## Note
            - Tested 4K 120FPS on Windows 11, using software encoding and hardware encoding with a NVIDIA RTX 4060 GPU (H264 & AV1 Supported), AMD currently not tested yet.
            - This release is intended for testing and feedback purposes.
            - We encourage users to try Remo in different environments and provide any suggestions or report issues via GitHub Issues.
            - The full, unrestricted version of Remo will be available soon, offering enhanced features (QUIC Transport, AV1 encoding, and 4:4:4:4 color space). 
            
            *The current release is limited to 1 connected user, webRTC (h264) only and is built using GitHub Actions CI. It may trigger a false positive in antivirus scans.
          draft: false
          prerelease: false