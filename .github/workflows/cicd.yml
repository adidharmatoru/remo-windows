name: CICD

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

# Add permissions for the workflow
permissions:
  contents: write  # Required for creating releases

jobs:
  setup-ffmpeg:
    name: Setup FFmpeg
    # Only run on push to master or PR, skip for tag pushes
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check FFmpeg cache
        id: ffmpeg-cache
        uses: actions/cache@v4
        with:
          path: third_party/ffmpeg
          key: ffmpeg-${{ runner.os }}-${{ hashFiles('Cargo.toml') }}
      
      - name: Download and setup FFmpeg
        if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p third_party/ffmpeg
          curl -L https://cdn.adidharmatoru.dev/dev/uploads/files/ffmpeg-master-latest-win64-gpl-shared.zip -o ffmpeg.zip
          unzip ffmpeg.zip -d ffmpeg_temp
          FFMPEG_DIR=$(find ffmpeg_temp -type d -name "ffmpeg-*" | head -n 1)
          cp -r "$FFMPEG_DIR"/* third_party/ffmpeg/
          rm -rf ffmpeg_temp ffmpeg.zip
          
      - name: Validate FFmpeg setup
        run: |
          test -d third_party/ffmpeg/bin || exit 1
          test -d third_party/ffmpeg/lib || exit 1
          test -d third_party/ffmpeg/include || exit 1

  build:
    name: Build and Test
    # Only run on push to master or PR, skip for tag pushes
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')
    needs: setup-ffmpeg
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Git credentials
        run: |
          git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf https://github.com/

      - name: Restore FFmpeg cache
        uses: actions/cache@v4
        with:
          path: third_party/ffmpeg
          key: ffmpeg-${{ runner.os }}-${{ hashFiles('Cargo.toml') }}

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Cache Dependencies
        id: deps-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.toml') }}

      - name: Build Docker Image
        run: |
          docker build \
            --build-arg CARGO_HOME="/cargo-cache" \
            --build-arg GITHUB_TOKEN=${{ secrets.GH_PAT }} \
            -t remo-win-build \
            -f .docker/Dockerfile.ci-windows .

      - name: Build Release Binary
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/app \
            -v ${{ github.workspace }}/third_party:/app/third_party \
            -e CARGO_NET_GIT_FETCH_WITH_CLI=true \
            -e GITHUB_TOKEN=${{ secrets.GH_PAT }} \
            remo-win-build \
            sh -c "git config --global url.'https://${{ secrets.GH_PAT }}@github.com/'.insteadOf 'https://github.com/' && \
                  cargo clippy --target x86_64-pc-windows-gnu && \
                  cargo build --release --target x86_64-pc-windows-gnu"

      - name: Prepare Release Package
        run: |
          mkdir -p release
          cp target/x86_64-pc-windows-gnu/release/remo-win.exe ./release/
          cp third_party/ffmpeg/bin/*.dll ./release/
          cd release && zip -r remo-win.zip * && cd ..

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: remo-win
          path: release/remo-win.zip
          retention-days: 90  # Keep artifacts for 90 days

  create-release:
    name: Create Release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Latest Artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: cicd.yml
          branch: master
          name: remo-win
          path: release

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/**
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: |
            ## Changes
            - Introduce frame caching to optimize resource usage
            - Better cleanup of encoder resources on last user disconnect
            - Performance improvements for high-resolution displays

            ## Build
            Info
            - Built for Windows 11
            - All required DLLs are included in the zip archive 
            - Almost no installation needed.
            - Download latest vigemBus if you want to use gamepad from https://github.com/ViGEm/ViGEmBus/releases and install it.

            ## Note
            - Tested 4K 120FPS on Windows 11, using software encoding and hardware encoding with a NVIDIA RTX 4060 GPU (H264 & AV1 Supported), AMD currently not tested yet.
            - This release is intended for testing and feedback purposes.
            - We encourage users to try Remo in different environments and provide any suggestions or report issues via GitHub Issues.
            - The full, unrestricted version of Remo will be available soon, offering enhanced features. 
            
            *The current release is limited to 1 connected user, Full HD resolution 60FPS, and is built using GitHub Actions CI. It may trigger a false positive in antivirus scans.
          draft: false
          prerelease: false